// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/hr/hr.proto

package go_micro_srv_hr

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Hr service

type HrService interface {
	// Department
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...client.CallOption) (*CreateDepartmentResponse, error)
	Departments(ctx context.Context, in *DepartmentsRequest, opts ...client.CallOption) (*DepartmentsResponse, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...client.CallOption) (*EmptyMessage, error)
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...client.CallOption) (*EmptyMessage, error)
	// Employee Type
	CreateEmployeeType(ctx context.Context, in *CreateEmployeeTypeRequest, opts ...client.CallOption) (*CreateEmployeeTypeResponse, error)
	EmployeeTypes(ctx context.Context, in *EmployeeTypesRequest, opts ...client.CallOption) (*EmployeeTypesResponse, error)
	UpdateEmployeeType(ctx context.Context, in *UpdateEmployeeTypeRequest, opts ...client.CallOption) (*EmptyMessage, error)
	DeleteEmployeeType(ctx context.Context, in *DeleteEmployeeTypeRequest, opts ...client.CallOption) (*EmptyMessage, error)
	//Employee
	CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...client.CallOption) (*CreateEmployeeResponse, error)
	Employees(ctx context.Context, in *EmployeesRequest, opts ...client.CallOption) (*EmployeesResponse, error)
	UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, opts ...client.CallOption) (*EmptyMessage, error)
	DeleteEmployee(ctx context.Context, in *DeleteEmployeeRequest, opts ...client.CallOption) (*EmptyMessage, error)
}

type hrService struct {
	c    client.Client
	name string
}

func NewHrService(name string, c client.Client) HrService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.hr"
	}
	return &hrService{
		c:    c,
		name: name,
	}
}

func (c *hrService) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...client.CallOption) (*CreateDepartmentResponse, error) {
	req := c.c.NewRequest(c.name, "Hr.CreateDepartment", in)
	out := new(CreateDepartmentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) Departments(ctx context.Context, in *DepartmentsRequest, opts ...client.CallOption) (*DepartmentsResponse, error) {
	req := c.c.NewRequest(c.name, "Hr.Departments", in)
	out := new(DepartmentsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Hr.UpdateDepartment", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Hr.DeleteDepartment", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) CreateEmployeeType(ctx context.Context, in *CreateEmployeeTypeRequest, opts ...client.CallOption) (*CreateEmployeeTypeResponse, error) {
	req := c.c.NewRequest(c.name, "Hr.CreateEmployeeType", in)
	out := new(CreateEmployeeTypeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) EmployeeTypes(ctx context.Context, in *EmployeeTypesRequest, opts ...client.CallOption) (*EmployeeTypesResponse, error) {
	req := c.c.NewRequest(c.name, "Hr.EmployeeTypes", in)
	out := new(EmployeeTypesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) UpdateEmployeeType(ctx context.Context, in *UpdateEmployeeTypeRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Hr.UpdateEmployeeType", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) DeleteEmployeeType(ctx context.Context, in *DeleteEmployeeTypeRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Hr.DeleteEmployeeType", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...client.CallOption) (*CreateEmployeeResponse, error) {
	req := c.c.NewRequest(c.name, "Hr.CreateEmployee", in)
	out := new(CreateEmployeeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) Employees(ctx context.Context, in *EmployeesRequest, opts ...client.CallOption) (*EmployeesResponse, error) {
	req := c.c.NewRequest(c.name, "Hr.Employees", in)
	out := new(EmployeesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Hr.UpdateEmployee", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hrService) DeleteEmployee(ctx context.Context, in *DeleteEmployeeRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Hr.DeleteEmployee", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Hr service

type HrHandler interface {
	// Department
	CreateDepartment(context.Context, *CreateDepartmentRequest, *CreateDepartmentResponse) error
	Departments(context.Context, *DepartmentsRequest, *DepartmentsResponse) error
	UpdateDepartment(context.Context, *UpdateDepartmentRequest, *EmptyMessage) error
	DeleteDepartment(context.Context, *DeleteDepartmentRequest, *EmptyMessage) error
	// Employee Type
	CreateEmployeeType(context.Context, *CreateEmployeeTypeRequest, *CreateEmployeeTypeResponse) error
	EmployeeTypes(context.Context, *EmployeeTypesRequest, *EmployeeTypesResponse) error
	UpdateEmployeeType(context.Context, *UpdateEmployeeTypeRequest, *EmptyMessage) error
	DeleteEmployeeType(context.Context, *DeleteEmployeeTypeRequest, *EmptyMessage) error
	//Employee
	CreateEmployee(context.Context, *CreateEmployeeRequest, *CreateEmployeeResponse) error
	Employees(context.Context, *EmployeesRequest, *EmployeesResponse) error
	UpdateEmployee(context.Context, *UpdateEmployeeRequest, *EmptyMessage) error
	DeleteEmployee(context.Context, *DeleteEmployeeRequest, *EmptyMessage) error
}

func RegisterHrHandler(s server.Server, hdlr HrHandler, opts ...server.HandlerOption) error {
	type hr interface {
		CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, out *CreateDepartmentResponse) error
		Departments(ctx context.Context, in *DepartmentsRequest, out *DepartmentsResponse) error
		UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, out *EmptyMessage) error
		DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, out *EmptyMessage) error
		CreateEmployeeType(ctx context.Context, in *CreateEmployeeTypeRequest, out *CreateEmployeeTypeResponse) error
		EmployeeTypes(ctx context.Context, in *EmployeeTypesRequest, out *EmployeeTypesResponse) error
		UpdateEmployeeType(ctx context.Context, in *UpdateEmployeeTypeRequest, out *EmptyMessage) error
		DeleteEmployeeType(ctx context.Context, in *DeleteEmployeeTypeRequest, out *EmptyMessage) error
		CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, out *CreateEmployeeResponse) error
		Employees(ctx context.Context, in *EmployeesRequest, out *EmployeesResponse) error
		UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, out *EmptyMessage) error
		DeleteEmployee(ctx context.Context, in *DeleteEmployeeRequest, out *EmptyMessage) error
	}
	type Hr struct {
		hr
	}
	h := &hrHandler{hdlr}
	return s.Handle(s.NewHandler(&Hr{h}, opts...))
}

type hrHandler struct {
	HrHandler
}

func (h *hrHandler) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, out *CreateDepartmentResponse) error {
	return h.HrHandler.CreateDepartment(ctx, in, out)
}

func (h *hrHandler) Departments(ctx context.Context, in *DepartmentsRequest, out *DepartmentsResponse) error {
	return h.HrHandler.Departments(ctx, in, out)
}

func (h *hrHandler) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, out *EmptyMessage) error {
	return h.HrHandler.UpdateDepartment(ctx, in, out)
}

func (h *hrHandler) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, out *EmptyMessage) error {
	return h.HrHandler.DeleteDepartment(ctx, in, out)
}

func (h *hrHandler) CreateEmployeeType(ctx context.Context, in *CreateEmployeeTypeRequest, out *CreateEmployeeTypeResponse) error {
	return h.HrHandler.CreateEmployeeType(ctx, in, out)
}

func (h *hrHandler) EmployeeTypes(ctx context.Context, in *EmployeeTypesRequest, out *EmployeeTypesResponse) error {
	return h.HrHandler.EmployeeTypes(ctx, in, out)
}

func (h *hrHandler) UpdateEmployeeType(ctx context.Context, in *UpdateEmployeeTypeRequest, out *EmptyMessage) error {
	return h.HrHandler.UpdateEmployeeType(ctx, in, out)
}

func (h *hrHandler) DeleteEmployeeType(ctx context.Context, in *DeleteEmployeeTypeRequest, out *EmptyMessage) error {
	return h.HrHandler.DeleteEmployeeType(ctx, in, out)
}

func (h *hrHandler) CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, out *CreateEmployeeResponse) error {
	return h.HrHandler.CreateEmployee(ctx, in, out)
}

func (h *hrHandler) Employees(ctx context.Context, in *EmployeesRequest, out *EmployeesResponse) error {
	return h.HrHandler.Employees(ctx, in, out)
}

func (h *hrHandler) UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, out *EmptyMessage) error {
	return h.HrHandler.UpdateEmployee(ctx, in, out)
}

func (h *hrHandler) DeleteEmployee(ctx context.Context, in *DeleteEmployeeRequest, out *EmptyMessage) error {
	return h.HrHandler.DeleteEmployee(ctx, in, out)
}
