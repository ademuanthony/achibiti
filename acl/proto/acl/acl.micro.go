// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/acl/acl.proto

package go_micro_srv_acl

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Acl service

type AclService interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*LoginResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*EmptyMessage, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*EmptyMessage, error)
	DisableUser(ctx context.Context, in *DisableUserRequest, opts ...client.CallOption) (*EmptyMessage, error)
	Users(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error)
	UserDetails(ctx context.Context, in *UserDetailsRequest, opts ...client.CallOption) (*UserDetailsResponse, error)
	PasswordResetToken(ctx context.Context, in *PasswordResetTokenRequest, opts ...client.CallOption) (*PasswordResetTokenResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*EmptyMessage, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*EmptyMessage, error)
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...client.CallOption) (*AddRoleRequest, error)
	GetRoles(ctx context.Context, in *EmptyMessage, opts ...client.CallOption) (*GetRolesResponse, error)
	ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...client.CallOption) (*EmptyMessage, error)
}

type aclService struct {
	c    client.Client
	name string
}

func NewAclService(name string, c client.Client) AclService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.acl"
	}
	return &aclService{
		c:    c,
		name: name,
	}
}

func (c *aclService) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	req := c.c.NewRequest(c.name, "Acl.CreateUser", in)
	out := new(CreateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Acl.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Acl.RefreshToken", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Acl.UpdateUser", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Acl.DeleteUser", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) DisableUser(ctx context.Context, in *DisableUserRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Acl.DisableUser", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) Users(ctx context.Context, in *UsersRequest, opts ...client.CallOption) (*UsersResponse, error) {
	req := c.c.NewRequest(c.name, "Acl.Users", in)
	out := new(UsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) UserDetails(ctx context.Context, in *UserDetailsRequest, opts ...client.CallOption) (*UserDetailsResponse, error) {
	req := c.c.NewRequest(c.name, "Acl.UserDetails", in)
	out := new(UserDetailsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) PasswordResetToken(ctx context.Context, in *PasswordResetTokenRequest, opts ...client.CallOption) (*PasswordResetTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Acl.PasswordResetToken", in)
	out := new(PasswordResetTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Acl.ResetPassword", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Acl.ChangePassword", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) AddRole(ctx context.Context, in *AddRoleRequest, opts ...client.CallOption) (*AddRoleRequest, error) {
	req := c.c.NewRequest(c.name, "Acl.AddRole", in)
	out := new(AddRoleRequest)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) GetRoles(ctx context.Context, in *EmptyMessage, opts ...client.CallOption) (*GetRolesResponse, error) {
	req := c.c.NewRequest(c.name, "Acl.GetRoles", in)
	out := new(GetRolesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aclService) ChangeRole(ctx context.Context, in *ChangeRoleRequest, opts ...client.CallOption) (*EmptyMessage, error) {
	req := c.c.NewRequest(c.name, "Acl.ChangeRole", in)
	out := new(EmptyMessage)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Acl service

type AclHandler interface {
	CreateUser(context.Context, *CreateUserRequest, *CreateUserResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	RefreshToken(context.Context, *RefreshTokenRequest, *LoginResponse) error
	UpdateUser(context.Context, *UpdateUserRequest, *EmptyMessage) error
	DeleteUser(context.Context, *DeleteUserRequest, *EmptyMessage) error
	DisableUser(context.Context, *DisableUserRequest, *EmptyMessage) error
	Users(context.Context, *UsersRequest, *UsersResponse) error
	UserDetails(context.Context, *UserDetailsRequest, *UserDetailsResponse) error
	PasswordResetToken(context.Context, *PasswordResetTokenRequest, *PasswordResetTokenResponse) error
	ResetPassword(context.Context, *ResetPasswordRequest, *EmptyMessage) error
	ChangePassword(context.Context, *ChangePasswordRequest, *EmptyMessage) error
	AddRole(context.Context, *AddRoleRequest, *AddRoleRequest) error
	GetRoles(context.Context, *EmptyMessage, *GetRolesResponse) error
	ChangeRole(context.Context, *ChangeRoleRequest, *EmptyMessage) error
}

func RegisterAclHandler(s server.Server, hdlr AclHandler, opts ...server.HandlerOption) error {
	type acl interface {
		CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *LoginResponse) error
		UpdateUser(ctx context.Context, in *UpdateUserRequest, out *EmptyMessage) error
		DeleteUser(ctx context.Context, in *DeleteUserRequest, out *EmptyMessage) error
		DisableUser(ctx context.Context, in *DisableUserRequest, out *EmptyMessage) error
		Users(ctx context.Context, in *UsersRequest, out *UsersResponse) error
		UserDetails(ctx context.Context, in *UserDetailsRequest, out *UserDetailsResponse) error
		PasswordResetToken(ctx context.Context, in *PasswordResetTokenRequest, out *PasswordResetTokenResponse) error
		ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *EmptyMessage) error
		ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *EmptyMessage) error
		AddRole(ctx context.Context, in *AddRoleRequest, out *AddRoleRequest) error
		GetRoles(ctx context.Context, in *EmptyMessage, out *GetRolesResponse) error
		ChangeRole(ctx context.Context, in *ChangeRoleRequest, out *EmptyMessage) error
	}
	type Acl struct {
		acl
	}
	h := &aclHandler{hdlr}
	return s.Handle(s.NewHandler(&Acl{h}, opts...))
}

type aclHandler struct {
	AclHandler
}

func (h *aclHandler) CreateUser(ctx context.Context, in *CreateUserRequest, out *CreateUserResponse) error {
	return h.AclHandler.CreateUser(ctx, in, out)
}

func (h *aclHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AclHandler.Login(ctx, in, out)
}

func (h *aclHandler) RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *LoginResponse) error {
	return h.AclHandler.RefreshToken(ctx, in, out)
}

func (h *aclHandler) UpdateUser(ctx context.Context, in *UpdateUserRequest, out *EmptyMessage) error {
	return h.AclHandler.UpdateUser(ctx, in, out)
}

func (h *aclHandler) DeleteUser(ctx context.Context, in *DeleteUserRequest, out *EmptyMessage) error {
	return h.AclHandler.DeleteUser(ctx, in, out)
}

func (h *aclHandler) DisableUser(ctx context.Context, in *DisableUserRequest, out *EmptyMessage) error {
	return h.AclHandler.DisableUser(ctx, in, out)
}

func (h *aclHandler) Users(ctx context.Context, in *UsersRequest, out *UsersResponse) error {
	return h.AclHandler.Users(ctx, in, out)
}

func (h *aclHandler) UserDetails(ctx context.Context, in *UserDetailsRequest, out *UserDetailsResponse) error {
	return h.AclHandler.UserDetails(ctx, in, out)
}

func (h *aclHandler) PasswordResetToken(ctx context.Context, in *PasswordResetTokenRequest, out *PasswordResetTokenResponse) error {
	return h.AclHandler.PasswordResetToken(ctx, in, out)
}

func (h *aclHandler) ResetPassword(ctx context.Context, in *ResetPasswordRequest, out *EmptyMessage) error {
	return h.AclHandler.ResetPassword(ctx, in, out)
}

func (h *aclHandler) ChangePassword(ctx context.Context, in *ChangePasswordRequest, out *EmptyMessage) error {
	return h.AclHandler.ChangePassword(ctx, in, out)
}

func (h *aclHandler) AddRole(ctx context.Context, in *AddRoleRequest, out *AddRoleRequest) error {
	return h.AclHandler.AddRole(ctx, in, out)
}

func (h *aclHandler) GetRoles(ctx context.Context, in *EmptyMessage, out *GetRolesResponse) error {
	return h.AclHandler.GetRoles(ctx, in, out)
}

func (h *aclHandler) ChangeRole(ctx context.Context, in *ChangeRoleRequest, out *EmptyMessage) error {
	return h.AclHandler.ChangeRole(ctx, in, out)
}
